{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["ComicsList","useState","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","className","to","id","src","thumbnail","alt","title","price","renderItems","spinner","Spinner","errorMessage","ErrorMessage","disabled","style","onClick","ComicsPage","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"iNA+EeA,EAtEI,WACf,MAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2CF,oBAAS,GAApD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA2BJ,mBAAS,GAApC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAqCN,oBAAS,GAA9C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEA,EAAsCC,cAA/BC,EAAP,EAAOA,QAAQC,EAAf,EAAeA,MAAMC,EAArB,EAAqBA,aAErBC,qBAAU,WACNC,EAAUT,GAAO,KACnB,IAEF,IAAMS,EAAY,SAACT,EAAOU,GACZX,GAAVW,GACAH,EAAaP,GACRW,KAAKC,IAGRA,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EACTD,EAAcE,OAAS,IACtBD,GAAQ,GAEbjB,EAAc,GAAD,mBAAKD,GAAL,YAAoBiB,KACjCd,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAeW,IAwBlB,IAAME,EArBN,SAAqBC,GACjB,IAAMD,EAAQC,EAAIC,KAAI,SAACC,EAAKC,GACxB,OACI,oBAAIC,UAAU,eAAd,SACI,eAAC,IAAD,CAAMC,GAAE,kBAAaH,EAAKI,IAA1B,UACI,qBAAKC,IAAKL,EAAKM,UAAWC,IAAKP,EAAKQ,MAAON,UAAU,qBACrD,qBAAKA,UAAU,oBAAf,SAAoCF,EAAKQ,QACzC,qBAAKN,UAAU,qBAAf,SAAqCF,EAAKS,YAJhBR,MAU1C,OACI,oBAAIC,UAAU,eAAd,SACKL,IAMCa,CAAYjC,GAEpBkC,EAAUzB,IAAYP,EAAiB,cAACiC,EAAA,EAAD,IAAa,KACpDC,EAAe1B,EAAQ,cAAC2B,EAAA,EAAD,IAAkB,KAE/C,OACI,sBAAKZ,UAAU,eAAf,UACKL,EACAgB,EACAF,EACD,wBAAQT,UAAU,mCACTa,SAAUpC,EACVqC,MAAO,CAAC,QAAWjC,EAAc,OAAS,SAC1CkC,QAAS,kBAAM3B,EAAUT,IAHlC,SAII,qBAAKqB,UAAU,QAAf,6BC5DDgB,UAVI,WACf,OACI,qCACC,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,S,0FCHM,SAASC,EAAmBtB,GACzC,OCJa,SAA4BA,GACzC,GAAIuB,MAAMC,QAAQxB,GAAM,OAAO,OAAAyB,EAAA,GAAiBzB,GDGzC,CAAkBA,IELZ,SAA0B0B,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgB1B,IAAQ,OAAA+B,EAAA,GAA2B/B,IGLvE,WACb,MAAM,IAAIgC,UAAU,wIHIwE","file":"static/js/6.fa36f7d1.chunk.js","sourcesContent":["import {useState,useEffect} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    const [comicsList,setComicsList] = useState([]);\n    const [newItemLoading,setNewItemLoading] = useState(false);\n    const [offset,setOffset] = useState(0);\n    const [comicsEnded,setComicsEnded] = useState(false);\n\n    const {loading,error,getAllComics}  = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset,true);\n    },[])\n\n    const onRequest = (offset,initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if(newComicsList.length < 8) {\n            ended = true;\n        }\n       setComicsList([...comicsList, ...newComicsList ]);\n       setNewItemLoading(false);\n       setOffset(offset + 8);\n       setComicsEnded(ended)\n    }\n\n    function renderItems(arr)  {\n        const items = arr.map((item,i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n        \n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    \n    }\n\n    const items = renderItems(comicsList);\n\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    const errorMessage = error ? <ErrorMessage/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {items}\n            {errorMessage}\n            {spinner}\n            <button className=\"button button__main button__long\"\n                     disabled={newItemLoading}\n                     style={{'display': comicsEnded ? 'none' : 'block'}}\n                     onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from '../appBanner/AppBanner';\nimport ComicsList from '../comicsList/ComicsList';\n\nconst ComicsPage = () => {\n    return (\n        <>\n         <AppBanner/>\n         <ComicsList/>\n        </>\n       \n    )\n}\n\nexport default ComicsPage;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}