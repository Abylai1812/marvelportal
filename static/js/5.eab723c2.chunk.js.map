{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","a","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration","margin","background","display","width","height","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.eab723c2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState,useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () =>  {\n\n    const [char, setChar] = useState(false);\n    const {loading,error,getCharacter,clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    },[])\n\n    const onCharLoaded = (char) => {\n        setChar(char); \n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null; \n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\"\n                            onClick={updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n\n    }\n   \nconst View = ({char}) => {\n    const {name,description,thumbnail,homepage,wiki} = char;\n\n    let imgStyle = {'objectFit': 'cover'}\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = {'objectFit': 'contain'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">Homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n    )\n\n}\n\nexport default RandomChar;","import {useState,useEffect,useRef} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList,setCharList] = useState([]);\n    const [newItemLoading,setNewItemLoading] = useState(false);\n    const [offset,setOffset] = useState(470);\n    const [charEnded,setCharEnded] = useState(false);\n\n    const {loading,error,getAllCharacters}  = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset,true);\n    },[])\n\n    const onRequest = (offset,initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n       setCharList([...charList, ...newCharList ]);\n       setNewItemLoading(false);\n       setOffset(offset + 9);\n       setCharEnded(ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr)  {\n        const items = arr.map((item,i) => {\n            let imgStyle = {'objectFit': 'cover'}\n            if(item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n                imgStyle = {'objectFit': 'unset'}\n            }\n\n            return (\n                <li className=\"char__item\"\n                tabIndex={0}\n                ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => { \n                            props.onCharSelected(item.id)\n                            focusOnItem(i);\n                        }}\n                        onKeyPress = {(e) => {\n                            if (e.key === '' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}\n                    >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n        \n        return (\n            <div className=\"char__list\">\n                {spinner}\n                {errorMessage}\n                {items}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n\n    }\n    \n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useState,useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char,setChar] = useState(null);\n    \n    const {loading,error,getCharacter,clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId]);\n\n    const onCharLoaded = (char) => {\n        setChar(char);    \n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        } \n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded)\n    }\n\n        const skeleton = error || loading || char ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n               {skeleton}\n               {errorMessage}\n               {spinner}\n               {content}\n            </div>\n        )\n\n    }\n   \n\nconst View = ({char}) => {\n    const {name,description,thumbnail,homepage,wiki,comics} = char;\n    let imgStyle = {'objectFit': 'cover'}\n            if(thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n                imgStyle = {'objectFit': 'unset'}\n            }\n\n    return (\n        <>\n        <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle}/>\n        <div>\n            <div className=\"char__info-name\">{name}</div>\n            <div className=\"char__btns\">\n                <a href={homepage} className=\"button button__main\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n    <div className=\"char__descr\">\n        {description}\n    </div>\n    <div className=\"char__comics\">Comics:</div>\n    <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {\n            comics.map((item,i) => {\n                // eslint-disable-next-line \n                if(i>9) return;\n                return (\n                    <li key={i} className=\"char__comics-item\">\n                        {item.name}\n                    </li>\n\n                )\n            })\n        }\n    </ul>\n    </>\n\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik,Form,Field,ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport  ErrorMessage  from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char,setChar] = useState(null);\r\n    const {loading,error,getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className='char__search-critical-error'><ErrorMessage/></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className='char__search-wrapper'>\r\n                        <div className='char__search-success'>There is: Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className='inner'>To page</div>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className='char__search-error'>\r\n                        The character eas not found.Check the name and try again\r\n                    </div>;\r\n    \r\n    return (\r\n        <div className='char__search-form'>\r\n            <Formik \r\n                initialValues={{\r\n                    charName:''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className='char__search-label' htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className='char__search-wrapper'>\r\n                        <Field \r\n                            id=\"charName\"\r\n                            name=\"charName\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className='button button__main'\r\n                            disabled={loading}>\r\n                            <div className='inner'>find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className='char__search-error' name=\"charName\"/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Component} from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error:false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error,errorInfo);\n        this.setState({\n            error:true\n        })\n    }\n\n    render() {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        } \n        return this.props.children;\n\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar,setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n       setChar(id);\n    }\n\n    return (\n        <>\n             <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}  />\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","\nimport error from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"200px\" height=\"200px\" src={error} alt=\"error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n    const {loading,request,error,clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=f79b1b911a3cbb528ce6fb4ee60f4500';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}/characters/${id}?&${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}/comics/${id}?&${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name:char.name,\n            description:char.description ? `${char.description.slice(0,200)}...` : 'There are is not description',\n            thumbnail:char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage:char.urls[0].url,\n            wiki:char.urls[1].url,\n            comics:char.comics.items \n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id:comics.id,\n            title:comics.title,\n            description:comics.description || 'There is no description',\n            pageCount:comics.pageCount ? `${comics.pageCount} p.` : `No information about number of pages`,\n            thumbnail:comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language:comics.textObjects.language || 'en-rus',\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n        }\n    }\n    \n    return {loading,clearError,error,getAllCharacters,getCharacterByName,getCharacter,getAllComics,getComic}\n}\n\nexport default useMarvelService;","import {useState,useCallback} from \"react\";\n\nexport const useHttp = () => {\n    const [loading,setLoading] = useState(false);\n    const [error,setError] = useState(null);\n\n    const request = useCallback(async (url, method =\"GET\", body=null, headers = {\"Content-Type\":\"application/json\"}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url,{method,body,headers});\n\n            if(!response.ok) {\n                throw new Error(`Could not fetch ${url}, status:${response.status}`)\n            }\n\n            const data = await response.json();\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        } \n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading,request,error,clearError}\n}"],"sourceRoot":""}